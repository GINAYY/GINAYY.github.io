[{"title":"PicGo+Github搭建图床","path":"/2024/11/06/PicGo-Github搭建图床/","content":"安装PicGohttps://github.com/Molunerfinn/PicGo/releases 安装完在桌面点了好几次没反应，反复卸载，最后看文档才发现是在状态栏处打开。 https://picgo.github.io/PicGo-Doc/zh/guide/#%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85 配置GitHub仓库为了使用GitHub作为图床，你需要一个GitHub仓库来存放图片，确保仓库的权限设置为公开，这样别人才能访问你的图片。 生成Personal Access Token (PAT)为了使PicGo能够访问你的GitHub仓库，你需要生成一个Personal Access Token： 登录你的GitHub账户。 访问设置页面，找到“Developer settings”部分。 在“Personal access tokens”中生成一个新的访问令牌。 确保你的访问令牌具有足够的权限来推送到仓库（至少需要repo权限）。 生成后，确保复制并保存你的访问令牌，因为它不会再次显示。 配置PicGo 在PicGo的设置中找到“图床设置”。 选择“GitHub”作为图床服务。 输入你的GitHub仓库名称（格式为username/repo）。 输入你的Personal Access Token。 配置分支名称，默认为main或master。 配置路径前缀，这是你图片存放在GitHub仓库中的目录路径。 保存设置。 PicGo 插件https://github.com/PicGo/Awesome-PicGo vscode-migrator 0.0.2 功能：从 Visual Studio Code 的图片上传插件（如 PicGo 的 VS Code 插件）导入图片。 quick-capture 1.0.0-alpha.2 功能：一个快速截图插件，用于 PicGo，允许用户快速捕捉屏幕并上传图片。 https://github.com/PicGo/picgo-plugin-quick-capture 点击链接看教程 pic-migrator 1.3.2 功能：一个 PicGo 插件，用于在 Markdown 文件中迁移图片链接。 super-prefix 1.2.2 功能：一个 PicGo 插件，用于为上传的文件名添加优雅的前缀。 https://github.com/gclove/picgo-plugin-super-prefix#readme Picgo-plugin-clipboard 功能：允许你将剪贴板中的图片直接上传到配置的图床 可以愉快的使用了","tags":["PicGo","Github"],"categories":["工具"]},{"title":"Git学习","path":"/2024/11/06/Git学习/","content":"Git原理123代码块1代码块2代码块3 12345678910111213141516171819202122232425262728293031#include &lt;bits/stdc++.h&gt;using namespace std;void dfs()&#123; // 代码块 // 代码块 // 代码块 // 代码块 // 代码块 // 代码块 // 代码块 // 代码块 // 代码块 // 代码块 // 代码块 // 代码块 // 代码块 // 代码块 // 代码块 // 代码块 // 代码块 // 代码块 // 代码块 // 代码块 // 代码块 cout &lt;&lt; &quot;Hello World!&quot; &lt;&lt; endl;&#125;int main()&#123; dfs(); return 0;&#125;","tags":["Git"]},{"title":"Hello World","path":"/2024/11/06/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartHEXO无后端运维和高速渲染页面是静态站点生成器,我使用了 Github Pages 和 Vercel 来部署博客 Create a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment"},{"title":"Markdown格式","path":"/2024/10/11/Markdown/","content":"123456# 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题 一级标题二级标题三级标题四级标题五级标题六级标题1###### tags: `This is tag` tags: This is tag列表无序列表：*，+，- 表示无序列表。注意：符号后面一定要有一个空格，起到缩进的作用 123- 列表1 - 列表2- 列表3 列表1 列表2 列表3 有序列表：英文句点后面一定要有一个空格 1231. 列表12. 列表23. 列表3 列表1 列表2 列表3 123&gt; 引用1&gt; 引用2&gt; 引用3 引用1引用2引用3 1 代码块 1 123代码块1代码块2代码块3 12345678910111213141516171819202122232425262728293031#include &lt;bits/stdc++.h&gt;using namespace std;void dfs()&#123; // 代码块 // 代码块 // 代码块 // 代码块 // 代码块 // 代码块 // 代码块 // 代码块 // 代码块 // 代码块 // 代码块 // 代码块 // 代码块 // 代码块 // 代码块 // 代码块 // 代码块 // 代码块 // 代码块 // 代码块 // 代码块 cout &lt;&lt; &quot;Hello World!&quot; &lt;&lt; endl;&#125;int main()&#123; dfs(); return 0;&#125; 123![图片描述](https://www.example.com/image.jpg) 点击图片可放大1&#123;% image /路径/路径.jpg %&#125; 插入链接12[链接](URL_ADDRESS) markdown教程 强调语法12345678*斜体文本*_斜体文本_**粗体文本**__粗体文本__**_同时斜体和粗体_** 斜体文本斜体文本 粗体文本粗体文本 同时斜体和粗体 任务列表123- [x] 已完成项- [ ] 未完成项 已完成项 未完成项 表格123456| 表头 | 表头 || ---- | ---- || 单元 | 单元 || 单元 | 单元 | 表头 表头 单元 单元 单元 单元 水平分隔线1234567三个或三个以上的符号，必须在独立的一行，前后不能有其他文字--- 短横线***星号___下短线 短横线 星号 下短线","tags":["Markdown"],"categories":["工具"]},{"title":"about","path":"/about/index.html","content":"GinaA lifelong journey of learning and creating"},{"path":"/js/adjust-codeblock-height.js","content":"// 给超长代码块增加滚动条 function adjustCodeBlockHeight() { document.addEventListener(\"DOMContentLoaded\", function () { // 选择所有的.md-text元素 var codeBlocks = document.querySelectorAll('.md-text'); // 遍历每个.md-text元素 codeBlocks.forEach(function (block) { // 检查是否包含.highlight类的子元素，且父元素高度超过500px var highlightBlocks = block.querySelectorAll('.highlight'); highlightBlocks.forEach(function (highlightBlock) { if (highlightBlock.clientHeight > 100) { highlightBlock.style.maxHeight = '300px'; highlightBlock.style.overflow = 'auto'; } }); }); }); } adjustCodeBlockHeight()"},{"path":"/js/l2d.js","content":"addEventListener(\"DOMContentLoaded\", function () { let models = [ { width: 230, height: 350, bottom: \"0px\", right: \"0px\", role: \"https://cdn.jsdelivr.net/gh/imuncle/live2d@master/model/snow_miku/model.json\", background: \"\", opacity: 1, mobile: false, draggable: false, scale: 0.07, }, ]; new Live2dLoader(models); });"},{"path":"/js/chatgpt.js","content":"function ChucklePostAI(config) { // 获取要插入 AI 的文章容器 function getArticleContainer() { let container = null; if (!config.auto_mount && config.el) { container = document.querySelector( config.el || \"#post #article-container\" ); } return container || findLargestContentElement(); } // 计算一个元素的子元素的数量 function countChildElements(element) { let count = 1; Array.from(element.children).forEach((child) => { count += countChildElements(child); }); return count; } // 检查一个元素是否应被排除（如 iframe、footer 等） function shouldExcludeElement(element) { const tagBlacklist = [\"IFRAME\", \"FOOTER\", \"HEADER\", \"BLOCKQUOTE\"]; const classBlacklist = [\"aplayer\", \"comment\"]; return ( tagBlacklist.includes(element.tagName) || Array.from(element.classList).some((className) => classBlacklist.some((cls) => className.includes(cls)) ) ); } // 查找内容最多的 DOM 元素 function findLargestContentElement() { const rootElement = findRootElement(); return findLargestElementInTree(rootElement); } // 查找内容最多的根元素 function findRootElement() { const elementsToCheck = [document.body]; let rootElement = null; let maxCount = 0; while (elementsToCheck.length > 0) { const element = elementsToCheck.shift(); if (shouldExcludeElement(element)) continue; const childCount = countChildElements(element); if (childCount > maxCount) { maxCount = childCount; rootElement = element; } Array.from(element.children).forEach((child) => { elementsToCheck.push(child); }); } return rootElement; } // 查找最大的 DOM 元素 function findLargestElementInTree(rootElement) { const weightMap = { H1: 1.5, H2: 1, H3: 0.5, P: 1 }; let maxWeight = 0; let largestElement = null; function calculateWeight(element) { if (shouldExcludeElement(element)) return; let elementWeight = Array.from(element.children).reduce( (weight, child) => { return weight + (weightMap[child.tagName] || 0); }, 0 ); if (elementWeight > maxWeight) { maxWeight = elementWeight; largestElement = element; } Array.from(element.children).forEach(calculateWeight); } calculateWeight(rootElement); return largestElement; } // 创建并插入 AI 的 UI 元素 function createAIElement() { const aiContainer = document.createElement(\"div\"); aiContainer.className = \"post-ai\"; aiContainer.id = \"post-ai\"; aiContainer.style.cssText = ` margin: 30px 0; `; const aiInterface = { name: \"文章辅助AI\", introduce: \"我是文章辅助AI，点击下方的按钮，让我生成本文简介\", version: \"gpt-3.5-turbo-16k\", buttons: [\"介绍自己\", \"生成摘要\"], ...config.interface, }; aiContainer.innerHTML = ` ${aiInterface.name} 切换简介 ${aiInterface.version} ${aiInterface.name}初始化中... ${aiInterface.buttons .map((btn) => `${btn}`) .join(\"\")} `; bindButtonEvents(aiContainer); const articleContainer = getArticleContainer(); if (articleContainer) { articleContainer.insertBefore(aiContainer, articleContainer.firstChild); } disableButtons(aiContainer); // 禁用按钮 generateSummary(aiContainer); // 初始化时生成文章摘要 } // 绑定按钮事件 function bindButtonEvents(aiContainer) { const generateIntroductionButton = aiContainer.querySelector( \".ai-btn-item:first-child\" ); const generateSummaryButton = aiContainer.querySelector( \".ai-btn-item:last-child\" ); generateIntroductionButton.addEventListener(\"click\", () => { disableButtons(aiContainer); // 禁用按钮 displaySummary( \"我是文章辅助AI，使用的OpenAI的gpt-3.5-turbo, embedding, gpt-4o-mini, gpt-4模型。点击下方的按钮，让我生成本文简介。\", aiContainer ); }); generateSummaryButton.addEventListener(\"click\", () => { disableButtons(aiContainer); // 禁用按钮 generateSummary(aiContainer); // 将 aiContainer 传递给 generateSummary }); } // 禁用所有按钮 function disableButtons(aiContainer) { const buttons = aiContainer.querySelectorAll(\".ai-btn-item\"); buttons.forEach((button) => { button.disabled = true; button.style.pointerEvents = \"none\"; // 禁用点击事件 button.style.opacity = \"0.5\"; // 调整按钮的透明度 }); } // 启用所有按钮 function enableButtons(aiContainer) { const buttons = aiContainer.querySelectorAll(\".ai-btn-item\"); buttons.forEach((button) => { button.disabled = false; button.style.pointerEvents = \"auto\"; // 允许点击事件 button.style.opacity = \"1\"; // 恢复按钮的透明度 }); } // 生成文章摘要 async function generateSummary(aiContainer) { const content = getArticleContent(); const apiKey = \"sk-X0SGzTCLenEtBroX1Nm5nItG1iYP32zAtUKyyT2im62MYWFD\"; // 请替换为你的实际 API KEY const requestBody = { model: \"gpt-3.5-turbo-16k\", messages: [ { role: \"system\", content: \"请为下面的内容生成摘要，以本文讲述了开头，不要出现任何与文章无关的内容。\", }, { role: \"user\", content: content }, ], temperature: 0, }; try { const response = await fetch(\"https://api.chatanywhere.tech/v1\", { method: \"POST\", headers: { \"Content-Type\": \"application/json\", Authorization: `Bearer ${apiKey}`, }, body: JSON.stringify(requestBody), }); if (!response.ok) { throw new Error(\"网络响应不是 OK\"); } const data = await response.json(); displaySummary(data.choices[0].message.content, aiContainer); console.log(\"摘要生成成功:\", data.choices[0].message.content); } catch (error) { console.error(\"请求失败:\", error); } } // 获取文章内容 function getArticleContent() { const articleContainer = getArticleContainer(); return articleContainer ? articleContainer.innerText : \"\"; // 获取文章的文本内容 } // 显示生成的摘要（添加打字机效果） function displaySummary(summary, aiContainer) { const aiSpeechContent = document.querySelector(\".ai-explanation\"); if (aiSpeechContent) { aiSpeechContent.innerText = \"\"; // 清空之前的内容 typeWriterEffect(aiSpeechContent, summary, 15, aiContainer); // 逐字显示摘要 } } // 打字机效果 function typeWriterEffect(element, text, delay, aiContainer) { let index = 0; function type() { if (index < text.length) { element.innerText += text.charAt(index); index++; setTimeout(type, delay); } else { enableButtons(aiContainer); // 打字效果结束后启用按钮 } } type(); } // 初始化函数 function initialize() { createAIElement(); } initialize(); }"}]